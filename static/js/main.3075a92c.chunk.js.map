{"version":3,"sources":["components/Timer/store.tsx","components/Timer/Timer.tsx","components/Timer/Controls.tsx","components/Timer/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["seconds$","BehaviorSubject","isPaused$","Subject","subscribe","console","log","reset$","intId","clearInterval","next","isPaused","setInterval","value","timerStore","Timer","props","useState","time","setTime","useEffect","sub","unsubscribe","timeFormated","Duration","fromMillis","toFormat","className","Controls","setIsPaused","isClickInDelay","setIsClickInDelay","type","size","onClick","icon","PlayCircleFilled","StopFilled","disabled","PauseCircleFilled","UndoOutlined","index","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEMA,EAAW,IAAIC,IAAwB,GAGvCC,EAAY,IAAIC,IACtBD,EAAUE,UAAUC,QAAQC,KAE5B,IAAMC,EAAS,IAAIJ,IACnBI,EAAOH,UAAUC,QAAQC,KAEzB,IAAIE,EAA+B,KACnCD,EAAOH,WAAU,WAChBI,GAASC,cAAcD,GACvBR,EAASU,KAAK,GACdR,EAAUQ,MAAK,MAEhBR,EAAUE,WAAU,SAACO,GAEfA,EAKJH,GAASC,cAAcD,GAJvBA,EAAQI,aAAY,WACnBZ,EAASU,KAAKV,EAASa,MAAQ,MAC7B,OAcL,IAKeC,EALI,CAClBd,SAAUA,EACVE,UAAWA,EACXK,OAAQA,G,QCvBMQ,EAXD,SAACC,GAAkB,IAAD,EACPC,mBAAS,GADF,mBACxBC,EADwB,KAClBC,EADkB,KAE/BC,qBAAU,WACT,IAAMC,EAAMP,EAAWd,SAASI,UAAUe,GAC1C,OAAO,kBAAME,EAAIC,iBACf,IACH,IACMC,EADSC,WAASC,WAAWP,GACPQ,SAAP,gBACrB,OAAO,qBAAKC,UAAU,QAAf,SAAwBJ,K,wCCkEjBK,EAnEE,SAACZ,GAAkB,IAAD,EACFC,oBAAS,GADP,mBAC3BN,EAD2B,KACjBkB,EADiB,OAEUZ,oBAAS,GAFnB,mBAE3Ba,EAF2B,KAEXC,EAFW,KAGlCX,qBAAU,WACT,IAAMC,EAAMP,EAAWZ,UAAUE,UAAUyB,GAC3C,OAAO,kBAAMR,EAAIC,iBACf,IAsBH,OACC,sBAAKK,UAAU,iBAAf,UACC,cAAC,IAAD,CACCK,KAAK,UACLC,KAAK,QACLC,QA1BiB,WACfvB,EACHG,EAAWP,OAAOG,OAElBI,EAAWZ,UAAUQ,MAAK,IAuBzByB,KAAMxB,EAAW,cAACyB,EAAA,EAAD,IAAuB,cAACC,EAAA,EAAD,IAJzC,SAME1B,EAAW,QAAU,SAEvB,cAAC,IAAD,CACCqB,KAAK,UACLC,KAAK,QACLK,YACE3B,GAA0C,IAA9BG,EAAWd,SAASa,OACjCiB,GAIDI,QAhCY,WACd,GAAIJ,EAAgB,OAAO,EAE3BhB,EAAWZ,UAAUQ,MAAMC,GAC3BC,aAAY,WACXmB,GAAkB,KAChB,KACHA,GAAkB,IA0BhBI,KAAMxB,EAAW,cAACyB,EAAA,EAAD,IAAuB,cAACG,EAAA,EAAD,IAVzC,kBAcA,cAAC,IAAD,CACCP,KAAK,UACLC,KAAK,QACLK,YACC3B,GAA0C,IAA9BG,EAAWd,SAASa,OAEjCqB,QAlCW,WACbpB,EAAWP,OAAOG,QAkChByB,KAAM,cAACK,EAAA,EAAD,IAPP,uBChDYC,G,MATD,SAACzB,GACd,OACC,0BAASW,UAAU,YAAnB,UACC,cAAC,EAAD,IACA,cAAC,EAAD,SCmBYe,MAzBf,WACC,OACC,sBAAKf,UAAU,MAAf,UACC,cAAC,EAAD,IACA,iCACC,+BACC,6BACC,mBAAGgB,KAAK,8BAAR,sBAED,6BACC,mBAAGA,KAAK,8CAAR,wBAID,6BACC,mBAAGA,KAAK,+BAAR,8CCNSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3075a92c.chunk.js","sourcesContent":["import { Subject, BehaviorSubject } from \"rxjs\";\r\n\r\nconst seconds$ = new BehaviorSubject<number>(0);\r\n// seconds$.subscribe(console.log);\r\n\r\nconst isPaused$ = new Subject<boolean>();\r\nisPaused$.subscribe(console.log);\r\n\r\nconst reset$ = new Subject();\r\nreset$.subscribe(console.log);\r\n\r\nlet intId: NodeJS.Timeout | null = null;\r\nreset$.subscribe(() => {\r\n\tintId && clearInterval(intId);\r\n\tseconds$.next(0);\r\n\tisPaused$.next(false);\r\n});\r\nisPaused$.subscribe((isPaused) => {\r\n\t// console.log(\"isPaused\", isPaused, seconds$.value);\r\n\tif (!isPaused) {\r\n\t\tintId = setInterval(() => {\r\n\t\t\tseconds$.next(seconds$.value + 32);\r\n\t\t}, 32);\r\n\t} else {\r\n\t\tintId && clearInterval(intId);\r\n\t}\r\n});\r\n\r\n// const timer$ = timer(0, 1000).pipe(\r\n// \tmap((x) => {\r\n// \t\treturn x;\r\n// \t}),\r\n// \ttakeUntil(isPaused$),\r\n// \trepeatWhen(() => reset$)\r\n// );\r\n\r\nconst timerStore = {\r\n\tseconds$: seconds$,\r\n\tisPaused$: isPaused$,\r\n\treset$: reset$,\r\n};\r\nexport default timerStore;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport timerStore from \"./store\";\r\nimport { Duration } from \"luxon\";\r\ninterface Props {}\r\n\r\nconst Timer = (props: Props) => {\r\n\tconst [time, setTime] = useState(0);\r\n\tuseEffect(() => {\r\n\t\tconst sub = timerStore.seconds$.subscribe(setTime);\r\n\t\treturn () => sub.unsubscribe();\r\n\t}, []);\r\n\tconst dateOb = Duration.fromMillis(time);\r\n\tconst timeFormated = dateOb.toFormat(`hh':'mm':'SS`);\r\n\treturn <div className=\"timer\">{timeFormated}</div>;\r\n};\r\n\r\nexport default Timer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport timerStore from \"./store\";\r\nimport { Button } from \"antd\";\r\nimport {\r\n\tStopFilled,\r\n\tPlayCircleFilled,\r\n\tPauseCircleFilled,\r\n\tUndoOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\ninterface Props {}\r\n\r\nconst Controls = (props: Props) => {\r\n\tconst [isPaused, setIsPaused] = useState(true);\r\n\tconst [isClickInDelay, setIsClickInDelay] = useState(false);\r\n\tuseEffect(() => {\r\n\t\tconst sub = timerStore.isPaused$.subscribe(setIsPaused);\r\n\t\treturn () => sub.unsubscribe();\r\n\t}, []);\r\n\tconst startToggle = () => {\r\n\t\tif (isPaused) {\r\n\t\t\ttimerStore.reset$.next();\r\n\t\t} else {\r\n\t\t\ttimerStore.isPaused$.next(true);\r\n\t\t}\r\n\t};\r\n\r\n\tconst toggle = () => {\r\n\t\tif (isClickInDelay) return false;\r\n\r\n\t\ttimerStore.isPaused$.next(!isPaused);\r\n\t\tsetInterval(() => {\r\n\t\t\tsetIsClickInDelay(false);\r\n\t\t}, 300);\r\n\t\tsetIsClickInDelay(true);\r\n\t};\r\n\tconst reset = () => {\r\n\t\ttimerStore.reset$.next();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"timer-controls\">\r\n\t\t\t<Button\r\n\t\t\t\ttype=\"primary\"\r\n\t\t\t\tsize=\"large\"\r\n\t\t\t\tonClick={startToggle}\r\n\t\t\t\ticon={isPaused ? <PlayCircleFilled /> : <StopFilled />}\r\n\t\t\t>\r\n\t\t\t\t{isPaused ? \"Start\" : \"Stop\"}\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\ttype=\"primary\"\r\n\t\t\t\tsize=\"large\"\r\n\t\t\t\tdisabled={\r\n\t\t\t\t\t(isPaused && timerStore.seconds$.value === 0) ||\r\n\t\t\t\t\tisClickInDelay\r\n\t\t\t\t\t\t? true\r\n\t\t\t\t\t\t: false\r\n\t\t\t\t}\r\n\t\t\t\tonClick={toggle}\r\n\t\t\t\ticon={isPaused ? <PlayCircleFilled /> : <PauseCircleFilled />}\r\n\t\t\t>\r\n\t\t\t\tWait\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\ttype=\"primary\"\r\n\t\t\t\tsize=\"large\"\r\n\t\t\t\tdisabled={\r\n\t\t\t\t\tisPaused && timerStore.seconds$.value === 0 ? true : false\r\n\t\t\t\t}\r\n\t\t\t\tonClick={reset}\r\n\t\t\t\ticon={<UndoOutlined />}\r\n\t\t\t>\r\n\t\t\t\tReset\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport Controls from \"./Controls\";\r\nimport \"./index.css\";\r\n\r\ninterface Props {}\r\n\r\nconst index = (props: Props) => {\r\n\treturn (\r\n\t\t<section className=\"sct-timer\">\r\n\t\t\t<Timer />\r\n\t\t\t<Controls />\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport Timer from \"./components/Timer/index\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Timer></Timer>\n\t\t\t<footer>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"https://github.com/VladKorn\">github</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"https://t.me/KornienkoVladimirVladimirovich\">\n\t\t\t\t\t\t\ttelegram\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"mailto:webvladkorn@gmail.com\">\n\t\t\t\t\t\t\twebvladkorn@gmail.com\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}